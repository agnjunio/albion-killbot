name: Server Release

on:
  push:
    tags: [v*.*.*]
    paths:
      - "server/**"

jobs:
  publish:
    name: Publish server docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: docker_meta
        name: Docker meta
        uses: docker/metadata-action@v4
        with:
          images: agnjunio/albion-killbot
          tags: type=semver,pattern={{version}}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Server
        uses: docker/build-push-action@v3
        with:
          context: server/
          file: server/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  deploy-api-crawler:
    name: Deploy api & crawler
    runs-on: ubuntu-latest
    needs:
      - publish
    environment: production
    steps:
      - name: Deploy api and crawler
        uses: cross-the-world/ssh-pipeline@master
        with:
          host: ${{ vars.SSH_HOST_API }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            touch migration-state.json &&
            docker compose --ansi never run --rm crawler npm run db:migrate &&
            docker compose --ansi never up -d --pull always --force-recreate
    
  deploy-bot:
    name: Deploy bot shards
    runs-on: ubuntu-latest
    needs:
      - publish
    environment: production
    strategy:
      matrix:
        shard: [0, 1, 2]
        include:
        - shard: 0
          SSH_HOST: SSH_HOST_BOT_0
        - shard: 1
          SSH_HOST: SSH_HOST_BOT_1
        - shard: 2
          SSH_HOST: SSH_HOST_BOT_2
    steps:
      - name: Deploy bot shard '#${{ matrix.shard }}'
        uses: cross-the-world/ssh-pipeline@master
        with:
          host: ${{ vars[matrix.SSH_HOST] }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            touch migration-state.json &&
            docker compose --ansi never up -d --pull always --force-recreate
